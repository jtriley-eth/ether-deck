// -------------------------------------------------------------------------------------------------
//! # Ether Deck
//!
//! Extensible, Optimized Smart Wallet

#include "./lib/libabi.huff"
#include "./lib/libcast.huff"
#include "./lib/libecdsa.huff"
#include "./lib/liberr.huff"
#include "./lib/libevent.huff"
#include "./lib/libstore.huff"

/// ## Ether Deck Initialization Code
///
/// ### Directives
///
/// 1. Sets the initial threshold to one.
/// 2. Sets the caller to 'authorized'.
/// 3. (Implicit) returns the runtime bytecode.
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x01 dup1           // [one, one]

    THRESHOLD_SLOT()    // [threshold_slot, one, one]
    sstore              // [one]

    caller              // [caller, one]
    AUTH_SLOT()         // [caller_auth_slot, one]
    sstore              // []
}

/// ## Ether Deck Entry Point
///
/// ### Directives
///
/// 1. Loads the selector word from calldata and casts to a bytes4 (u32).
/// 2. If the selector maps to a built-in function, dispatch to that function.
/// 3. If the selector does not map to a built-in function, check if the shard is set.
/// 4. If the shard is set, we delegatecall to it and bubble up the returned data.
/// 5. If the selector neither maps to a shard nor a built-in function, revert.
///
/// ### Panics
///
/// - If the selector does not map to a built-in function and the shard is not set.
/// - If the dispatched built-in function reverts.
/// - If the shard reverts.
/// - If the selector neither maps to a shard nor a build-in function.
#define macro MAIN() = takes(0) returns (0) {
    0x00 calldataload TO_U32()  // [selector]

    // checks built-ins
    dup1 IS_SYSCALL() syscall jumpi
    dup1 IS_SET_AUTH() set_auth jumpi
    dup1 IS_SET_THRESHOLD() set_threshold jumpi
    dup1 IS_SET_SHARD() set_shard jumpi

    // checks if shard is set for selector
    TRY_USE_SHARD()

    // if execution has not halted by now, revert
    THROW_DISPATCH()

    syscall: SYSCALL()
    set_auth: SET_AUTH()
    set_threshold: SET_THRESHOLD()
    set_shard: SET_SHARD()
}

/// ## Set Authorized Account
///
/// ### Directives
///
/// 1. Asserts the context's caller is this contract (MUST be self call).
/// 2. Loads the authorization word from calldata and casts to a boolean (u8).
/// 3. Loads the address word from calldata and casts to an address.
/// 4. Stores the authorization boolean at the authorization hashmap slot.
/// 5. Logs the event.
///
/// ### Panics
///
/// - When the context's caller is not this contract.
#define macro SET_AUTH() = takes (0) returns (0) {
    caller                  // [caller]
    address                 // [self, caller]
    eq                      // [is_self]
    is_self                 // [is_self_dest, is_self]
    jumpi                   // []
        THROW_AUTH()        // []
    is_self:                // []
        0x18                // [calldata_ptr]
        calldataload        // [auth_word]
        TO_U8()             // [auth]
        0x04                // [calldata_ptr, auth]
        calldataload        // [address_word, auth]
        TO_ADDR()           // [address, auth]
        dup2 dup2           // [address, auth, address, auth]
        AUTH_SLOT()         // [auth_slot, auth, address, auth]
        sstore              // [address, auth]
        LOG_AUTH_SET()      // []
        stop                // []
}

/// ## Set Signature Threshold
///
/// ### Directives
///
/// 1. Asserts the context's caller is this contract (MUST be self call).
/// 2. Loads the threshold word from calldata and casts to a u8.
/// 3. Stores the threshold at the threshold hashmap slot.
/// 4. Logs the event.
///
/// ### Panics
///
/// - When the context's caller is not this contract.
#define macro SET_THRESHOLD() = takes (0) returns (0) {
    caller                  // [caller]
    address                 // [self, caller]
    eq                      // [is_self]
    is_self                 // [is_self_dest, is_self]
    jumpi                   // []
        THROW_AUTH()        // []
    is_self:                // []
        0x04                // [calldata_ptr]
        calldataload        // [threshold_word]
        TO_U8()             // [threshold]
        dup1                // [threshold, threshold]
        THRESHOLD_SLOT()    // [threshold_slot, threshold, threshold]
        sstore              // [threshold]
        LOG_THRESHOLD_SET() // []
        stop                // []
}

/// ## Set Shard
///
/// ### Directives
///
/// 1. Asserts the context's caller is this contract (MUST be self call).
/// 2. Loads the shard word from calldata and casts to an address.
/// 3. Loads the selector word from calldata and casts to a u32.
/// 4. Stores the shard address at the selector hashmap slot.
/// 5. Logs the event.
///
/// ### Panics
///
/// - When the context's caller is not this contract.
#define macro SET_SHARD() = takes (0) returns (0) {
    caller                  // [caller]
    address                 // [self, caller]
    eq                      // [is_self]
    is_self                 // [is_self_dest, is_self]
    jumpi                   // []
        THROW_AUTH()        // []
    is_self:                // []
        0x08                // [calldata_ptr]
        calldataload        // [shard_word]
        TO_ADDR()           // [shard]
        0x04                // [calldata_ptr, shard]
        calldataload        // [selector_word, shard]
        TO_U32()            // [selector, shard]
        dup2 dup2           // [selector, shard, selector, shard]
        SHARD_SLOT()        // [selector_slot, shard, selector, shard]
        sstore              // [selector, shard]
        LOG_SHARD_SET()     // []
        stop                // []
}

/// ## Perform Syscall
///
/// ### Directives
///
/// 1. Loads deadline from calldata and casts it to a u64.
/// 2. Asserts the deadlines is greater than the block's timestamp.
/// 3. Compute the signature hash.
/// 4. Verify signatures.
/// 5. Increment the `ID` value.
/// 6. Make the extenal call.
/// 7. Bubble up the result.
///
/// ### Panics
///
/// - When the block timestamp is greater than or equal to the deadline
/// - The `VERIFY_SIGS` macro panics.
/// - The external call panics.
#define macro SYSCALL() = takes (0) returns (0) {
    0x43                    // [calldata_ptr]
    calldataload            // [deadline_word]
    TO_U64()                // [deadline]
    timestamp               // [now, deadline]
    lt                      // [valid_time]
    valid_time              // [valid_time_dest, valid_time]
    jumpi                   // []
        THROW_DEADLINE()    // []
    valid_time:             // []
        0x4b                // [calldata_ptr]
        calldataload        // [payload_len_word]
        TO_U32()            // [payload_len]
        dup1 dup1           // [payload_len, payload_len, payload_len]
        0x4f                // [calldata_ptr, payload_len, payload_len, payload_len]
        add                 // [sigs_ptr, payload_len, payload_len]
        swap1               // [payload_len, sigs_ptr, payload_len]
        0x4b                // [calldata_ptr, payload_len, sigs_ptr, payload_len]
        add                 // [data_len, sigs_ptr, payload_len]
        THRESHOLD_SLOT()    // [threshold_slot, data_len, sigs_ptr, payload_len]
        sload               // [sigs_len, data_len, sigs_ptr, payload_len]
        swap1               // [data_len, sigs_len, sigs_ptr, payload_len]
        COMPUTE_HASH()      // [hash, sigs_len, sigs_ptr, payload_len]
        VERIFY_SIGS()       // [payload_len]

        ID_SLOT()           // [id_slot, payload_len]
        sload               // [id, payload_len]
        0x01                // [one, id, payload_len]
        add                 // [new_id, payload_len]
        ID_SLOT()           // [id_slot, new_id, payload_len]
        sstore              // [payload_len]

        dup1                // [payload_len, payload_len]
        0x4f                // [payload_ptr, payload_len, payload_len]
        0x00                // [mem_ptr, payload_ptr, payload_len, payload_len]
        calldatacopy        // [payload_len]

        0x00                // [ret_ptr, payload_len]
        0x00                // [ret_len, ret_ptr, payload_len]
        swap2               // [payload_len, ret_ptr, ret_len]
        0x00                // [mem_ptr, payload_len, ret_ptr, ret_len]
        0x38                // [calldata_ptr, mem_ptr, payload_len, ret_ptr, ret_len]
        calldataload        // [value_word, mem_ptr, payload_len, ret_ptr, ret_len]
        TO_U88()            // [value, mem_ptr, payload_len, ret_ptr, ret_len]
        0x24                // [calldata_ptr, value, mem_ptr, payload_len, ret_ptr, ret_len]
        calldataload        // [target_word, value, mem_ptr, payload_len, ret_ptr, ret_len]
        TO_ADDR()           // [target, value, mem_ptr, payload_len, ret_ptr, ret_len]
        gas                 // [gas, target, value, mem_ptr, payload_len, ret_ptr, ret_len]
        call                // [success]

        returndatasize      // [ret_len, success]
        0x00                // [ret_ptr, ret_len, success]
        0x00                // [mem_ptr, ret_ptr, ret_len, success]
        returndatacopy      // [success]
        syscall_success     // [syscall_success_dest, success]
        jumpi               // []
            returndatasize  // [ret_len]
            0x00            // [mem_ptr, ret_len]
            revert          // []
        syscall_success:    // []
            returndatasize  // [ret_len]
            0x00            // [mem_ptr, ret_len]
            return          // []
}

/// ## Use Shard
///
/// ### Directives
///
/// 1. Loads the shard from the selector hashmap slot.
/// 2. Asserts the shard is not null.
/// 3. Copies the calldata to memory.
/// 4. Delegate calls the shard.
/// 5. Bubble up the returned data with return if the call succeeded or with revert if it failed.
///
/// ### Panics
///
/// - When the delegate call fails.
#define macro TRY_USE_SHARD() = takes (1) returns (0) {
    // takes:               // [selector]
    SHARD_SLOT()            // [shard_slot]
    sload                   // [shard]
    dup1                    // [shard, shard]
    iszero                  // [null_shard, shard]
    null_shard              // [null_shard_dest, null_shard shard]
    jumpi                   // [shard]
        calldatasize        // [calldata_len, shard]
        0x00                // [calldata_ptr, calldata_len, shard]
        0x00                // [mem_ptr, calldata_ptr, calldata_len, shard]
        calldatacopy        // [shard]
        0x00                // [ret_ptr, shard]
        calldatasize        // [arg_len, ret_ptr, shard]
        0x00                // [arg_ptr, arg_len, ret_ptr, shard]
        0x00                // [ret_len, arg_ptr, arg_len, ret_ptr, shard]
        swap4               // [shard, arg_ptr, arg_len, ret_ptr, ret_len]
        gas                 // [gas, shard, arg_ptr, arg_len, ret_ptr, ret_len]
        delegatecall        // [success]
        returndatasize      // [ret_len, success]
        0x00                // [ret_ptr, ret_len, success]
        0x00                // [mem_ptr, ret_ptr, ret_len, success]
        returndatacopy      // [success]
        success             // [success_dest, success]
        jumpi               // []
            returndatasize  // [ret_len]
            0x00            // [ret_ptr, ret_len]
            revert          // []
        success:            // []
            returndatasize  // [ret_len]
            0x00            // [ret_ptr, ret_len]
            return          // []
    null_shard:             // []
}
